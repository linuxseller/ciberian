fn sum(i32 arr[]):i32 {
    i32 count;
    i32 sm;
    while(count < arr.length){
        sm = sm + arr[count];
        count = count+1;
    }
    return sm;
}

fn max(i32 arr[]):i32{
    i32 i = 0;
    i32 mx=arr[0];
    while(i<arr.length){
        if(mx<arr[i]){
            mx = arr[i];
        }
        i=i+1;
    }
    return mx;
}

fn min(i32 arr[]):i32{
    i32 i = 0;
    i32 mn=arr[0];
    while(i<arr.length){
        if(mn>arr[i]){
            mn = arr[i];
        }
        i=i+1;
    }
    return mn;
}

fn main() : i8 {
    i32 size;
    readlnTo size;
    i32 arr[size];
    i32 counter;
    while(counter<arr.length){
        readlnTo arr[counter];
        counter = counter+1;
    }
    dprint arr;
    i32 sm = sum(arr,);
    i32 mx = max(arr,);
    i32 mn = min(arr,);
    dprint sm mx mn;
}
